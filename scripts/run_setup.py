#!/usr/bin/env python3
"""
Script ch·∫°y to√†n b·ªô setup h·ªá th·ªëng
"""

import subprocess
import sys
import os

def run_command(command, description):
    """Ch·∫°y command v√† hi·ªÉn th·ªã k·∫øt qu·∫£"""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} th√†nh c√¥ng!")
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} th·∫•t b·∫°i!")
        print(f"Error: {e.stderr}")
        return False

def main():
    """Ch·∫°y to√†n b·ªô setup"""
    print("üöÄ B·∫Øt ƒë·∫ßu setup h·ªá th·ªëng qu·∫£n l√Ω ph√≤ng lab DNU...")
    
    # Danh s√°ch c√°c script c·∫ßn ch·∫°y
    scripts = [
        ("python scripts/setup_project.py", "T·∫°o c·∫•u tr√∫c project"),
        ("python scripts/django_setup.py", "T·∫°o c√°c file Django"),
        ("python scripts/create_templates.py", "T·∫°o templates HTML"),
        ("python scripts/create_user_system.py", "T·∫°o h·ªá th·ªëng ng∆∞·ªùi d√πng"),
        ("python scripts/ai_integration_real.py", "T√≠ch h·ª£p AI th·ª±c t·∫ø"),
    ]
    
    success_count = 0
    for command, description in scripts:
        if run_command(command, description):
            success_count += 1
        else:
            print(f"\n‚ö†Ô∏è  C√≥ l·ªói x·∫£y ra khi {description.lower()}")
            choice = input("B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (y/n): ")
            if choice.lower() != 'y':
                break
    
    print(f"\nüìä K·∫øt qu·∫£: {success_count}/{len(scripts)} script ch·∫°y th√†nh c√¥ng")
    
    if success_count == len(scripts):
        print("\nüéâ Setup ho√†n t·∫•t! C√°c b∆∞·ªõc ti·∫øp theo:")
        print("1. cd dnu_lab_system")
        print("2. python -m venv venv")
        print("3. source venv/bin/activate  # Linux/Mac")
        print("   # ho·∫∑c venv\\Scripts\\activate  # Windows")
        print("4. pip install -r requirements.txt")
        print("5. cp .env.example .env")
        print("6. Ch·ªânh s·ª≠a file .env v·ªõi th√¥ng tin th·ª±c t·∫ø")
        print("7. python manage.py makemigrations")
        print("8. python manage.py migrate")
        print("9. python manage.py createsuperuser")
        print("10. python ../scripts/create_sample_data.py")
        print("11. python manage.py runserver")
        print("\nü§ñ ƒê·ªÉ s·ª≠ d·ª•ng AI features:")
        print("- Th√™m OPENAI_API_KEY v√†o file .env")
        print("- Ch·∫°y: python manage.py ai_operations --generate-descriptions")
        print("- Kh·ªüi ƒë·ªông Celery: celery -A dnu_lab_system worker -l info")
        print("- Kh·ªüi ƒë·ªông Celery Beat: celery -A dnu_lab_system beat -l info")
    else:
        print("\n‚ö†Ô∏è  Setup ch∆∞a ho√†n t·∫•t. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c l·ªói.")

if __name__ == "__main__":
    main()
