"use client"

import type React from "react"
import { useState, useContext } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Sparkles, Send, Bot, User } from "lucide-react"
import { AppContext } from "./app-context"

interface Message {
  id: string
  role: "user" | "assistant"
  content: string
  timestamp: Date
  actions?: Array<{
    label: string
    action: () => void
  }>
}

interface AIAssistantProps {
  language: "vi" | "en"
  onNavigate?: (section: string) => void
}

export function AIAssistant({ language, onNavigate }: AIAssistantProps) {
  const { equipment, bookings, addBooking } = useContext(AppContext)
  const [messages, setMessages] = useState<Message[]>([])
  const [input, setInput] = useState("")
  const [isLoading, setIsLoading] = useState(false)

  const getSmartResponse = (
    question: string,
  ): { content: string; actions?: Array<{ label: string; action: () => void }> } => {
    const q = question.toLowerCase()

    // C√¢u h·ªèi v·ªÅ thi·∫øt b·ªã theo khoa
    if (q.includes("khoa") && (q.includes("thi·∫øt b·ªã") || q.includes("m√°y"))) {
      const departments = ["Khoa Sinh h·ªçc", "Khoa V·∫≠t l√Ω", "Khoa H√≥a h·ªçc", "Khoa C√¥ng ngh·ªá th√¥ng tin"]
      let response = "üìã **Danh s√°ch thi·∫øt b·ªã theo khoa:**\n\n"

      departments.forEach((dept) => {
        const deptEquipment = equipment.filter((eq) => eq.department === dept)
        response += `**${dept}:**\n`
        deptEquipment.forEach((eq) => {
          response += `‚Ä¢ ${eq.name} - ${eq.room} (${eq.available}/${eq.total} c√≥ s·∫µn)\n`
        })
        response += "\n"
      })

      return {
        content: response,
        actions: [
          {
            label: "ƒê·∫∑t l·ªãch ngay",
            action: () => onNavigate?.("booking"),
          },
        ],
      }
    }

    // C√¢u h·ªèi v·ªÅ thi·∫øt b·ªã c·ª• th·ªÉ
    if (q.includes("m√°y ly t√¢m") || q.includes("centrifuge")) {
      const centrifuge = equipment.find((eq) => eq.name.includes("Centrifuge"))
      if (centrifuge) {
        return {
          content: `üî¨ **M√°y ly t√¢m Centrifuge CF-15**\n\nüìç V·ªã tr√≠: ${centrifuge.room}\nüìä Tr·∫°ng th√°i: ${centrifuge.available}/${centrifuge.total} c√≥ s·∫µn\nüè¢ Khoa: ${centrifuge.department}\n\nüí° **C√°ch s·ª≠ d·ª•ng:**\n‚Ä¢ Ki·ªÉm tra c√¢n b·∫±ng m·∫´u tr∆∞·ªõc khi ch·∫°y\n‚Ä¢ ƒê·∫∑t t·ªëc ƒë·ªô ph√π h·ª£p (th∆∞·ªùng 3000-15000 rpm)\n‚Ä¢ Th·ªùi gian ly t√¢m: 5-30 ph√∫t t√πy m·∫´u\n‚Ä¢ Lu√¥n ƒë√≥ng n·∫Øp tr∆∞·ªõc khi kh·ªüi ƒë·ªông`,
          actions: [
            {
              label: "ƒê·∫∑t l·ªãch m√°y ly t√¢m",
              action: () => {
                const booking = {
                  id: Date.now().toString(),
                  userId: "current-user",
                  userName: "Sinh vi√™n",
                  equipmentId: centrifuge.id,
                  equipmentName: centrifuge.name,
                  room: centrifuge.room,
                  date: new Date().toISOString().split("T")[0],
                  startTime: "09:00",
                  endTime: "11:00",
                  purpose: "Ly t√¢m m·∫´u sinh h·ªçc",
                  status: "pending" as const,
                  createdAt: new Date(),
                }
                addBooking(booking)
                setMessages((prev) => [
                  ...prev,
                  {
                    id: Date.now().toString(),
                    role: "assistant",
                    content: "‚úÖ ƒê√£ t·∫°o booking m√°y ly t√¢m th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra tab 'L·ªãch ƒë·∫∑t c·ªßa t√¥i'.",
                    timestamp: new Date(),
                  },
                ])
              },
            },
          ],
        }
      }
    }

    // C√¢u h·ªèi v·ªÅ PCR
    if (q.includes("pcr")) {
      return {
        content: `üß¨ **M√°y PCR Thermal Cycler**\n\nüìç V·ªã tr√≠: Lab B101\nüìä Tr·∫°ng th√°i: C√≥ s·∫µn\nüè¢ Khoa: Sinh h·ªçc\n\nüí° **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng PCR:**\n\n**1. Chu·∫©n b·ªã m·∫´u:**\n‚Ä¢ DNA template: 10-100 ng\n‚Ä¢ Primer forward/reverse: 0.2-1 ŒºM\n‚Ä¢ dNTPs: 200 ŒºM m·ªói lo·∫°i\n‚Ä¢ Taq polymerase: 1-2.5 units\n‚Ä¢ Buffer: 1x\n\n**2. Chu tr√¨nh nhi·ªát ƒë·ªô:**\n‚Ä¢ Denaturation: 94¬∞C - 30s\n‚Ä¢ Annealing: 55-65¬∞C - 30s\n‚Ä¢ Extension: 72¬∞C - 1 ph√∫t/kb\n‚Ä¢ S·ªë chu k·ª≥: 25-35\n\n**3. L∆∞u √Ω an to√†n:**\n‚Ä¢ ƒêeo gƒÉng tay v√† k√≠nh b·∫£o h·ªô\n‚Ä¢ L√†m vi·ªác trong t·ªß h√∫t\n‚Ä¢ X·ª≠ l√Ω ch·∫•t th·∫£i ƒë√∫ng quy ƒë·ªãnh`,
      }
    }

    // C√¢u h·ªèi v·ªÅ booking/ƒë·∫∑t l·ªãch
    if (q.includes("ƒë·∫∑t l·ªãch") || q.includes("booking")) {
      const pendingBookings = bookings.filter((b) => b.status === "pending").length
      const approvedBookings = bookings.filter((b) => b.status === "approved").length

      return {
        content: `üìÖ **Th√¥ng tin ƒë·∫∑t l·ªãch hi·ªán t·∫°i:**\n\n‚Ä¢ T·ªïng s·ªë booking: ${bookings.length}\n‚Ä¢ ƒêang ch·ªù duy·ªát: ${pendingBookings}\n‚Ä¢ ƒê√£ ƒë∆∞·ª£c duy·ªát: ${approvedBookings}\n\nüí° **H∆∞·ªõng d·∫´n ƒë·∫∑t l·ªãch:**\n1. Ch·ªçn khoa v√† thi·∫øt b·ªã\n2. Ch·ªçn ng√†y v√† gi·ªù s·ª≠ d·ª•ng\n3. M√¥ t·∫£ m·ª•c ƒë√≠ch s·ª≠ d·ª•ng\n4. G·ª≠i y√™u c·∫ßu v√† ch·ªù admin duy·ªát`,
        actions: [
          {
            label: "T·∫°o booking m·ªõi",
            action: () => onNavigate?.("booking"),
          },
          {
            label: "Xem l·ªãch c·ªßa t√¥i",
            action: () => onNavigate?.("my-bookings"),
          },
        ],
      }
    }

    // C√¢u h·ªèi v·ªÅ th·ªëng k√™
    if (q.includes("th·ªëng k√™") || q.includes("b√°o c√°o")) {
      const totalEquipment = equipment.length
      const availableEquipment = equipment.filter((eq) => eq.available > 0).length
      const busyEquipment = equipment.filter((eq) => eq.available === 0).length

      return {
        content: `üìä **Th·ªëng k√™ h·ªá th·ªëng:**\n\nüîß **Thi·∫øt b·ªã:**\n‚Ä¢ T·ªïng s·ªë: ${totalEquipment}\n‚Ä¢ C√≥ s·∫µn: ${availableEquipment}\n‚Ä¢ ƒêang s·ª≠ d·ª•ng: ${busyEquipment}\n\nüìÖ **Booking:**\n‚Ä¢ T·ªïng s·ªë: ${bookings.length}\n‚Ä¢ Ch·ªù duy·ªát: ${bookings.filter((b) => b.status === "pending").length}\n‚Ä¢ ƒê√£ duy·ªát: ${bookings.filter((b) => b.status === "approved").length}\n‚Ä¢ T·ª´ ch·ªëi: ${bookings.filter((b) => b.status === "rejected").length}`,
        actions: [
          {
            label: "Xem chi ti·∫øt thi·∫øt b·ªã",
            action: () => onNavigate?.("equipment"),
          },
        ],
      }
    }

    // C√¢u h·ªèi chung v·ªÅ khoa h·ªçc
    if (q.includes("dna") || q.includes("protein") || q.includes("enzyme")) {
      return {
        content: `üß¨ **Ki·∫øn th·ª©c sinh h·ªçc ph√¢n t·ª≠:**\n\n**DNA (Deoxyribonucleic Acid):**\n‚Ä¢ C·∫•u tr√∫c: Chu·ªói k√©p xo·∫Øn\n‚Ä¢ Th√†nh ph·∫ßn: A, T, G, C\n‚Ä¢ Ch·ª©c nƒÉng: L∆∞u tr·ªØ th√¥ng tin di truy·ªÅn\n\n**Protein:**\n‚Ä¢ C·∫•u tr√∫c: Chu·ªói amino acid\n‚Ä¢ Ch·ª©c nƒÉng: Enzyme, c·∫•u tr√∫c, v·∫≠n chuy·ªÉn\n‚Ä¢ T·ªïng h·ª£p: T·ª´ mRNA qua ribosome\n\n**Enzyme:**\n‚Ä¢ B·∫£n ch·∫•t: Protein x√∫c t√°c\n‚Ä¢ ƒê·∫∑c t√≠nh: ƒê·∫∑c hi·ªáu, b·ªã ·∫£nh h∆∞·ªüng b·ªüi pH, nhi·ªát ƒë·ªô\n‚Ä¢ ·ª®ng d·ª•ng: PCR, c·∫Øt DNA, n·ªëi DNA`,
      }
    }

    // C√¢u h·ªèi v·ªÅ h√≥a h·ªçc
    if (q.includes("ph") || q.includes("acid") || q.includes("base")) {
      return {
        content: `‚öóÔ∏è **Ki·∫øn th·ª©c h√≥a h·ªçc c∆° b·∫£n:**\n\n**pH (Potential of Hydrogen):**\n‚Ä¢ Thang ƒëo: 0-14\n‚Ä¢ pH < 7: Acid\n‚Ä¢ pH = 7: Trung t√≠nh\n‚Ä¢ pH > 7: Base\n\n**Acid m·∫°nh:** HCl, H‚ÇÇSO‚ÇÑ, HNO‚ÇÉ\n**Base m·∫°nh:** NaOH, KOH, Ca(OH)‚ÇÇ\n\n**·ª®ng d·ª•ng trong lab:**\n‚Ä¢ ƒêi·ªÅu ch·ªânh pH dung d·ªãch\n‚Ä¢ Chu·∫©n ƒë·ªô acid-base\n‚Ä¢ B·∫£o qu·∫£n m·∫´u sinh h·ªçc`,
      }
    }

    // C√¢u h·ªèi v·ªÅ v·∫≠t l√Ω
    if (q.includes("quang ph·ªï") || q.includes("uv") || q.includes("spectroscopy")) {
      return {
        content: `üî¨ **Quang ph·ªï h·ªçc:**\n\n**UV-Vis Spectroscopy:**\n‚Ä¢ Nguy√™n l√Ω: H·∫•p th·ª• √°nh s√°ng UV-Vis\n‚Ä¢ ·ª®ng d·ª•ng: ƒê·ªãnh l∆∞·ª£ng protein, DNA\n‚Ä¢ B∆∞·ªõc s√≥ng: 200-800 nm\n\n**ƒê·ªãnh lu·∫≠t Beer-Lambert:**\n‚Ä¢ A = Œµcl\n‚Ä¢ A: ƒê·ªô h·∫•p th·ª•\n‚Ä¢ Œµ: H·ªá s·ªë h·∫•p th·ª•\n‚Ä¢ c: N·ªìng ƒë·ªô\n‚Ä¢ l: ƒê·ªô d√†i quang h·ªçc\n\n**M√°y quang ph·ªï UV-Vis c√≥ s·∫µn t·∫°i Lab C301**`,
      }
    }

    // Tr·∫£ l·ªùi m·∫∑c ƒë·ªãnh th√¥ng minh
    return {
      content: `ü§ñ T√¥i l√† AI Assistant c·ªßa h·ªá th·ªëng qu·∫£n l√Ω Lab DNU!\n\nüí° **T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:**\n‚Ä¢ Th√¥ng tin thi·∫øt b·ªã v√† khoa\n‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng m√°y m√≥c\n‚Ä¢ Ki·∫øn th·ª©c khoa h·ªçc (Sinh, L√Ω, H√≥a, CNTT)\n‚Ä¢ ƒê·∫∑t l·ªãch v√† qu·∫£n l√Ω booking\n‚Ä¢ Th·ªëng k√™ v√† b√°o c√°o\n\n‚ùì **H√£y th·ª≠ h·ªèi:**\n‚Ä¢ "Khoa Sinh h·ªçc c√≥ nh·ªØng thi·∫øt b·ªã g√¨?"\n‚Ä¢ "C√°ch s·ª≠ d·ª•ng m√°y PCR nh∆∞ th·∫ø n√†o?"\n‚Ä¢ "T√¥i mu·ªën ƒë·∫∑t l·ªãch m√°y ly t√¢m"\n‚Ä¢ "DNA l√† g√¨?"\n‚Ä¢ "Th·ªëng k√™ h·ªá th·ªëng hi·ªán t·∫°i"`,
      actions: [
        {
          label: "Xem thi·∫øt b·ªã",
          action: () => onNavigate?.("equipment"),
        },
        {
          label: "ƒê·∫∑t l·ªãch m·ªõi",
          action: () => onNavigate?.("booking"),
        },
      ],
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!input.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: input,
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    const currentInput = input
    setInput("")
    setIsLoading(true)

    setTimeout(() => {
      const response = getSmartResponse(currentInput)
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: response.content,
        timestamp: new Date(),
        actions: response.actions,
      }

      setMessages((prev) => [...prev, assistantMessage])
      setIsLoading(false)
    }, 1000)
  }

  const suggestedQuestions = [
    "Khoa Sinh h·ªçc c√≥ nh·ªØng thi·∫øt b·ªã g√¨?",
    "C√°ch s·ª≠ d·ª•ng m√°y PCR nh∆∞ th·∫ø n√†o?",
    "T√¥i c·∫ßn m∆∞·ª£n m√°y ly t√¢m v√†o th·ª© 2",
    "DNA l√† g√¨?",
    "Th·ªëng k√™ h·ªá th·ªëng hi·ªán t·∫°i",
  ]

  return (
    <Card className="h-[600px] flex flex-col">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Sparkles className="h-5 w-5 text-orange-500" />
          {language === "vi" ? "Tr·ª£ l√Ω AI" : "AI Assistant"}
          <Badge variant="secondary" className="bg-orange-100 text-orange-700">
            DNU Lab AI
          </Badge>
        </CardTitle>
        <p className="text-sm text-muted-foreground">
          {language === "vi"
            ? "Tr·ª£ l√Ω AI th√¥ng minh - h·ªó tr·ª£ ƒë·∫∑t l·ªãch, t√¨m ki·∫øm thi·∫øt b·ªã v√† tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi"
            : "Smart AI Assistant - booking support, equipment search and Q&A"}
        </p>
      </CardHeader>

      <CardContent className="flex-1 flex flex-col">
        <div className="flex-1 overflow-y-auto space-y-4 mb-4">
          {messages.length === 0 && (
            <div className="text-center text-muted-foreground py-4">
              <Bot className="h-12 w-12 mx-auto mb-4 text-orange-500" />
              <p className="mb-4">
                {language === "vi"
                  ? "Xin ch√†o! T√¥i l√† AI Assistant si√™u th√¥ng minh c·ªßa DNU Lab! üöÄ"
                  : "Hello! I'm the super smart AI Assistant of DNU Lab! üöÄ"}
              </p>

              <div className="text-left max-w-md mx-auto">
                <p className="font-medium mb-2">V√≠ d·ª• c√¢u h·ªèi:</p>
                <div className="space-y-1">
                  {suggestedQuestions.map((question, index) => (
                    <button
                      key={index}
                      onClick={() => setInput(question)}
                      className="block w-full text-left text-sm p-2 rounded bg-orange-50 hover:bg-orange-100 text-orange-700 transition-colors"
                    >
                      ‚Ä¢ {question}
                    </button>
                  ))}
                </div>
              </div>
            </div>
          )}

          {messages.map((message) => (
            <div key={message.id} className={`flex gap-3 ${message.role === "user" ? "justify-end" : "justify-start"}`}>
              <div className={`flex gap-2 max-w-[85%] ${message.role === "user" ? "flex-row-reverse" : "flex-row"}`}>
                <div
                  className={`w-8 h-8 rounded-full flex items-center justify-center ${
                    message.role === "user" ? "bg-orange-500" : "bg-blue-500"
                  }`}
                >
                  {message.role === "user" ? (
                    <User className="h-4 w-4 text-white" />
                  ) : (
                    <Bot className="h-4 w-4 text-white" />
                  )}
                </div>
                <div
                  className={`rounded-lg p-3 ${
                    message.role === "user" ? "bg-orange-500 text-white" : "bg-gray-100 text-gray-900 border"
                  }`}
                >
                  <div className="whitespace-pre-wrap">{message.content}</div>

                  {message.actions && message.actions.length > 0 && (
                    <div className="mt-3 space-y-2">
                      {message.actions.map((action, index) => (
                        <Button
                          key={index}
                          size="sm"
                          variant="outline"
                          onClick={action.action}
                          className="mr-2 bg-white hover:bg-orange-50 border-orange-200"
                        >
                          {action.label}
                        </Button>
                      ))}
                    </div>
                  )}

                  <p className="text-xs opacity-70 mt-2">{message.timestamp.toLocaleTimeString()}</p>
                </div>
              </div>
            </div>
          ))}

          {isLoading && (
            <div className="flex gap-3">
              <div className="w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center">
                <Bot className="h-4 w-4 text-white" />
              </div>
              <div className="bg-gray-100 rounded-lg p-3 border">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-orange-400 rounded-full animate-bounce"></div>
                  <div
                    className="w-2 h-2 bg-orange-400 rounded-full animate-bounce"
                    style={{ animationDelay: "0.1s" }}
                  ></div>
                  <div
                    className="w-2 h-2 bg-orange-400 rounded-full animate-bounce"
                    style={{ animationDelay: "0.2s" }}
                  ></div>
                </div>
              </div>
            </div>
          )}
        </div>

        <form onSubmit={handleSubmit} className="flex gap-2">
          <Textarea
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder={language === "vi" ? "H·ªèi AI..." : "Ask AI..."}
            className="flex-1 min-h-[40px] max-h-[120px] resize-none"
            onKeyDown={(e) => {
              if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault()
                handleSubmit(e)
              }
            }}
          />
          <Button
            type="submit"
            disabled={isLoading || !input.trim()}
            className="bg-orange-500 hover:bg-orange-600 text-white"
          >
            <Send className="h-4 w-4" />
          </Button>
        </form>
      </CardContent>
    </Card>
  )
}
